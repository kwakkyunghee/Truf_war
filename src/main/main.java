package main;

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;

public class main{
	public static void main(String[] args){
		game_Frame fms = new game_Frame();
	}
}
class game_Frame extends JFrame implements KeyListener, Runnable{
	int f_width ;
	int f_height ;
	 
	int x, y; 
	boolean KeyUp = false;
	boolean KeyDown = false;
	boolean KeyLeft = false;
	boolean KeyRight = false;
	boolean KeySpace = false;
	//미사일 발사를 위한 키보드 스페이스키 입력을 추가합니다.

	Thread th;
	Toolkit tk = Toolkit.getDefaultToolkit();
	Image me_img;
	Image Missile_img; //미사일 이미지 변수
	ArrayList Missile_List = new ArrayList();
	//다수의 미사일을 관리하기 위한 배열

	Image buffImage; Graphics buffg;

	Missile ms; // 미사일 클래스 접근 키

	game_Frame(){
	init();
	start();
	  
	setTitle("슈팅 게임 만들기");
	setSize(f_width, f_height);
	Dimension screen = tk.getScreenSize();

	int f_xpos = (int)(screen.getWidth() / 2 - f_width / 2);
	int f_ypos = (int)(screen.getHeight() / 2 - f_height / 2);

	setLocation(f_xpos, f_ypos);
	setResizable(false);
	setVisible(true);
	}
	public void init(){ // 편의를 위해 init 에서 기본적인 세팅을 합니다.
	x = 100;
	y = 100;
	f_width = 800;
	f_height = 600;

	me_img = tk.getImage("alpaka.jpg"); 

	Missile_img = tk.getImage("chim.jpg");
	//미사일 이미지를 불러온다.


	}
	public void start(){
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	addKeyListener(this);
	th = new Thread(this); 
	th.start(); 

	}

	public void run(){ 
	try{ 
	while(true){
	KeyProcess(); 

	MissileProcess(); //미사일 처리 메소드 실행

	repaint(); 
	Thread.sleep(20); 
	}
	}catch (Exception e){}
	}

	public void MissileProcess(){ // 미사일 처리 메소드
	if ( KeySpace ){ // 스페이스바 키 상태가 true 면
	ms = new Missile(x, y); // 좌표 체크하여 넘기기
	Missile_List.add(ms);    // 해당 미사일 추가
	}
	}


	public void paint(Graphics g){
	buffImage = createImage(f_width, f_height); 
	buffg = buffImage.getGraphics();

	update(g);
	}

	public void update(Graphics g){
	Draw_Char();

	Draw_Missile(); // 그려진 미사일 가져와 실행

	g.drawImage(buffImage, 0, 0, this); 
	}

	public void Draw_Char(){ 
	buffg.clearRect(0, 0, f_width, f_height);
	buffg.drawImage(me_img, x, y, this);
	}

	public void Draw_Missile(){ // 미사일 그리는 메소드
	for (int i = 0 ; i < Missile_List.size()  ; ++i){
	//미사일 존재 유무를 확인한다.

	ms = (Missile) (Missile_List.get(i)); 
	// 미사일 위치값을 확인

	buffg.drawImage(Missile_img, ms.pos.x + 150, ms.pos.y + 30, this); 
	// 현재 좌표에 미사일 그리기.
	// 이미지 크기를 감안한 미사일 발사 좌표는 수정됨.

	ms.move();
	// 그려진 미사일을 정해진 숫자만큼 이동시키기

	if ( ms.pos.x > f_width ){ // 미사일이 화면 밖으로 나가면
	Missile_List.remove(i); // 미사일 지우기
	}
	}
	}

	public void keyPressed(KeyEvent e){
	switch(e.getKeyCode()){
	case KeyEvent.VK_UP :
	KeyUp = true;
	break;
	case KeyEvent.VK_DOWN :
	KeyDown = true;
	break;
	case KeyEvent.VK_LEFT :
	KeyLeft = true;
	break;
	case KeyEvent.VK_RIGHT :
	KeyRight = true;
	break;

	case KeyEvent.VK_SPACE : // 스페이스키 입력 처리 추가
	KeySpace = true;
	break;
	}
	}
	public void keyReleased(KeyEvent e){
	switch(e.getKeyCode()){
	case KeyEvent.VK_UP :
	KeyUp = false;
	break;
	case KeyEvent.VK_DOWN :
	KeyDown = false;
	break;
	case KeyEvent.VK_LEFT :
	KeyLeft = false;
	break;
	case KeyEvent.VK_RIGHT :
	KeyRight = false;
	break;

	case KeyEvent.VK_SPACE : // 스페이스키 입력 처리 추가
	KeySpace = false;
	break;

	}
	}
	public void keyTyped(KeyEvent e){}
	public void KeyProcess(){

	if(KeyUp == true) y -= 5;
	if(KeyDown == true) y += 5;
	if(KeyLeft == true) x -= 5;
	if(KeyRight == true) x += 5;
	}
	}

	class Missile{ // 미사일 위치 파악 및 이동을 위한 클래스 추가 

	Point pos; //미사일 좌표 변수
	Missile(int x, int y){ //미사일 좌표를 입력 받는 메소드
	pos = new Point(x, y); //미사일 좌표를 체크
	}
	public void move(){ //미사일 이동을 위한 메소드
	pos.x += 10; //x 좌표에 10만큼 미사일 이동
	}
	}